1.关系映射
	1.一对多
		在"多"表(实体类)中实现：
			实现外键关联
			外键属性=db.Column(db.TYPE,db.ForeignKey('主表.主键'))
		在"一"表(实体类)中实现：
			实现关联属性 以及 反向引用
			属性名 = db.relationship('关联的实体类',backref='属性名',lazy='dynamic')
	2.一对一
		在任何一个表(实体)中实现：
			实现外键关联
			外键属性=db.Column(db.TYPE,db.ForeignKey('主表.主键'))
		在另一个表(实体)中实现：
			实现关联属性 以及 反向引用
			属性名 = db.relationship('关联的实体类',backref='属性名',uselist=False)
	3.多对多
		创建关联表
			对象名 = db.Table(
				'关联表名',
				db.Column('id',db.Integer,primary_key=True),
				db.Column('外键列名1',db.TYPE,db.ForeignKey('主表1.主键')),
				db.Column('外键列名2',db.TYPE,db.ForeignKey('主表2.主键'))
			)
		在任何一个实体中实现：
			实现关联属性 以及 反向引用

			关联属性名=db.relationship(
				'关联的实体类名',
				secondary='关联的第三张表表名',
				lazy='dynamic',
				backref=db.backref(
					'反向引用属性名',
					lazy='dynamic'
				)
			)

=====================================================
1.cookie
	1.什么是cookie
		cookie 是一种数据存储技术
		将一段文本保存在客户端(浏览器)的一种技术，并可以长时间保存
	2.cookie的使用场合
		1.记住密码
		2.记住搜索关键词
	3.Flask 中使用 cookie
		1.使用 响应对象 保存cookie到客户端
			响应对象：
				1.resp = make_response("响应字符串")
				2.resp = redirect('地址')

			响应对象.set_cookie(key,value,max_age)
				key :保存的cookie的名称
				value ：保存的cookie的值
				max_age : 保存的时间，以 s 为单位的数字
		2.获取 cookie 中的值
			每次向服务器发送请求时，都会把 cookie 中的数据封装到request中带到服务器
			request.cookies
				request.cookies['key']
				request.cookies.get('key')
2.session
	1.什么是session
		session - 会话
		session是保存在服务器，为每个浏览器所开辟的一段空间
	2.session 在 Flask 中的实现
		1.配置 SECRET_KEY
			app.config['SECRET_KEY'] = "YOUR GUESS"
		2.使用session
			from flask import session

			1.向session中保存数据
				session['key'] = value
			2.从session中获取数据
				value = session['key']
			3.从session中删除数据
				del session[key]
	3.session  与  cookie 的异同：
		相同：都能够保存数据
		不同：
			1.保存地方不同
				session 是保存在服务器上的
				cookie  是保存在浏览器上的
			2.保存时长不同
				cookie  可以永久性保存
				session 临时性保存数据
			3.安全性问题
				session  安全级别较高
				cookie   安全级别较低
3.AJAX
	1.什么是AJAX
		Asynchronous Javascript And Xml
    异步的       JS        和   xml

		通过 JS 异步的向服务器发送请求并接收响应数据

		同步访问：
			当客户端向服务器发送请求时，服务器在处理的过程中，浏览器只能等待，效率较低
		异步访问：
			当客户端向服务器发送请求时，服务器在处理的过程中，客户端可以做其他的操作，不需要一直等待
		
		AJAX优点：
			1.异步 访问
			2.局部 刷新

		使用场合：
			1.搜索建议
			2.表单验证
			3.前后端完全分离
	2.AJAX核心对象 - 异步对象(XMLHttpRequest)
		1.什么是XMLHttpRequest
			简称为 xhr
			称为 "异步对象"，代替浏览器向服务器发送异步的请求并接收响应

			xhr 是由JS来提供的
		2.创建 异步对象 (xhr)
			主流的异步对象是 XMLHttpRequest 类型的，并且主流浏览器(IE7+,Chrome,Firefox,Safari,Opera)全部都支持 XMLHttpRequest。但在IE低版本浏览器中(IE6以及以下)，就不支持XMLHttpRequest，需要使用 ActiveXObject() 来创建异步对象

			<script>
				if(window.XMLHttpRequest){
					支持 XMLHttpRequest
					var xhr = new XMLHttpRequest();
				}else{
					不支持XMLHttpRequest,使用 ActiveXObject 创建异步对象
					var xhr = new ActiveXObject("Microsoft.XMLHTTP");
				}
			</script>
























eyJ1c2VybmFtZSI6InNhbmZlbmcuemhhbmcifQ











